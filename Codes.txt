Frontend

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>English to Kannada Translator</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
        input, button { margin: 10px; padding: 10px; }
    </style>
</head>
<body>

    <h2>English to Kannada Translator</h2>

    <input type="text" id="english" placeholder="Enter English word">
    <input type="text" id="kannada" placeholder="Enter Kannada Translation">
    <br>

    <label>Upload Image:</label>
    <input type="file" id="image"><br>

    <label>Record Voice:</label>
    <button id="record">üé§ Start Recording</button>
    <button id="stop" disabled>‚èπ Stop Recording</button>
    <br>
    
    <audio id="audioPreview" controls></audio>

    <button id="save">Save</button>
    
    <script>
        let mediaRecorder;
        let audioChunks = [];

        // Record Voice
        document.getElementById("record").addEventListener("click", async () => {
            let stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            mediaRecorder.start();

            document.getElementById("record").disabled = true;
            document.getElementById("stop").disabled = false;

            mediaRecorder.ondataavailable = event => {
                audioChunks.push(event.data);
            };
        });

        document.getElementById("stop").addEventListener("click", async () => {
            mediaRecorder.stop();

            document.getElementById("record").disabled = false;
            document.getElementById("stop").disabled = true;

            mediaRecorder.onstop = async () => {
                let audioBlob = new Blob(audioChunks, { type: "audio/wav" });
                let audioURL = URL.createObjectURL(audioBlob);
                document.getElementById("audioPreview").src = audioURL;
            };
        });

        // Save Data to Backend
        document.getElementById("save").addEventListener("click", async () => {
            let formData = new FormData();
            formData.append("english", document.getElementById("english").value);
            formData.append("kannada", document.getElementById("kannada").value);

            // Image file
            let imageFile = document.getElementById("image").files[0];
            if (imageFile) formData.append("image", imageFile);

            // Audio file
            let audioBlob = new Blob(audioChunks, { type: "audio/wav" });
            formData.append("audio", audioBlob, "recording.wav");

            let response = await fetch("/save_data", { method: "POST", body: formData });
            let result = await response.json();
            alert(result.message);
        });
    </script>

</body>
</html>

Backend

from flask import Flask, render_template, request, jsonify, send_from_directory
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
import os
import pandas as pd
from googletrans import Translator

app = Flask(__name__)
CORS(app)

# Configure Database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///translations.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'uploads'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

db = SQLAlchemy(app)
translator = Translator()

# Updated Database model
class Translation(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    english = db.Column(db.String(100), nullable=False)
    kannada = db.Column(db.String(100), nullable=False)
    image_file = db.Column(db.String(255))
    audio_file = db.Column(db.String(255))

def initialize_database():
    with app.app_context():
        db.create_all()
        print("Database tables created successfully!")

initialize_database()

@app.route('/')
def index():
    return render_template("index.html")

@app.route('/save_data', methods=['POST'])
def save_data():
    try:
        english_text = request.form['english']
        
        translation = translator.translate(english_text, src='en', dest='kn')
        kannada_text = translation.text

        image_filename = save_uploaded_file(request.files.get('image'))
        audio_filename = save_uploaded_file(request.files.get('audio'))

        new_entry = Translation(
            english=english_text,
            kannada=kannada_text,
            image_file=image_filename,
            audio_file=audio_filename
        )

        db.session.add(new_entry)
        db.session.commit()

        save_to_excel(new_entry)

        return jsonify({
            "message": "Data saved successfully!",
            "kannada": kannada_text,
            "id": new_entry.id
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500

def save_uploaded_file(file):
    if file and file.filename:
        filename = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(filename)
        return filename
    return None

def save_to_excel(entry):
    excel_file = 'translations_data.xlsx'
    columns = ["ID", "English", "Kannada", "Image File", "Audio File"]
    
    try:
        # Create file if it doesn't exist
        if not os.path.exists(excel_file):
            pd.DataFrame(columns=columns).to_excel(excel_file, index=False)
            
        # Read existing data
        with pd.ExcelFile(excel_file) as xls:
            df = pd.read_excel(xls)
        
        # Add new entry
        new_row = {
            "ID": entry.id,
            "English": entry.english,
            "Kannada": entry.kannada,
            "Image File": entry.image_file,
            "Audio File": entry.audio_file
        }
        
        df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
        
        # Save with a new writer object
        with pd.ExcelWriter(excel_file, engine='openpyxl', mode='w') as writer:
            df.to_excel(writer, index=False)
            
    except Exception as e:
        print(f"Error saving to Excel: {e}")
    except Exception as e:
        print(f"Error saving to Excel: {e}")

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

if __name__ == '__main__':
    app.run(debug=True) 
